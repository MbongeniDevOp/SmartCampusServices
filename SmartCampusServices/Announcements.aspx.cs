using System;
using System.Configuration;
using System.Data;
using System.Text;
using System.Web.UI.WebControls;
using Npgsql;

namespace SmartCampusServices
{
    public partial class Announcements : System.Web.UI.Page
    {
        private readonly Logger _logger = new Logger();

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                InitialiseVisibilityLinks();
                BindAnnouncements();
            }
        }

        private void BindAnnouncements()
        {
            string connStr = ConfigurationManager
                .ConnectionStrings["PostgresConnection"]
                .ConnectionString;

            using (var conn = new NpgsqlConnection(connStr))
            {
                try
                {
                    const string sql = @"
                        SELECT title, content, publish_date
                          FROM announcements
                         ORDER BY publish_date DESC";

                    var dt = new DataTable();
                    using (var da = new NpgsqlDataAdapter(sql, conn))
                        da.Fill(dt);

                    var sb = new StringBuilder();
                    if (dt.Rows.Count == 0)
                    {
                        sb.Append("<li>No announcements available.</li>");
                    }
                    else
                    {
                        foreach (DataRow row in dt.Rows)
                        {
                            sb.Append("<li>");
                            sb.AppendFormat(
                                "<strong>{0}</strong> – {1}<br/><em>Published on: {2}</em>",
                                row["title"],
                                row["content"],
                                Convert.ToDateTime(row["publish_date"])
                                       .ToString("yyyy-MM-dd")
                            );
                            sb.Append("</li>");
                        }
                    }

                    // **Here** we reference the Literal control declared in the .aspx
                    //ltAnnouncements.Text = sb.ToString();
                }
                catch (Exception ex)
                {
                    _logger.LogToFile($"Exception Caught: {ex.Message}");
                    // User-friendly fallback:
                    //ltAnnouncements.Text = "<li>Unable to load announcements.</li>";
                }
            }
        }

        private void InitialiseVisibilityLinks()
        {
            var logout = (LinkButton)Master.FindControl("lnkLogout");
            var helloUser = (LinkButton)Master.FindControl("lnkHelloUser");
            var login = (LinkButton)Master.FindControl("lnkLogin");
            var viewSchedules = (LinkButton)Master.FindControl("lnkViewSchedules");
            var notificationBtn = (LinkButton)Master.FindControl("lnkNotifications");
            var imgLogin = (Image)Master.FindControl("imgLogin");

            string fullName = Session["LoggedInFullName"] as string;
            bool isLoggedIn = !string.IsNullOrEmpty(fullName);

            login.Visible = !isLoggedIn;
            viewSchedules.Visible = isLoggedIn;
            logout.Visible = isLoggedIn;
            helloUser.Visible = isLoggedIn;
            notificationBtn.Visible = isLoggedIn;
            imgLogin.Visible = isLoggedIn;

            if (isLoggedIn)
                helloUser.Text = $"Hello, {fullName}";
        }

        // This field is auto-generated by ASP.NET when you build; do NOT declare manually:
        protected Literal ltAnnouncements;
    }
}
